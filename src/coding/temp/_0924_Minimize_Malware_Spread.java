/**
 *  @author Yunxiang He
 *  @date 01/29/2019
 */

package coding.temp;

import java.util.Arrays;

/*

In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.

Some nodes initial are initially infected by malware.  
Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.  
This spread of malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network, after the spread of malware stops.

We will remove one node from the initial list.  
Return the node that if removed, would minimize M(initial).  
If multiple nodes could be removed to minimize M(initial), return such a node with the smallest idx.

Note that if a node was removed from the initial list of infected nodes, it may still be infected later as a result of the malware spread.
 

Example 1:
    Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
    Output: 0

Example 2:
    Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
    Output: 0

Example 3:
    Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
    Output: 1


Note:
    1 < graph.length = graph[0].length <= 300
    0 <= graph[i][j] == graph[j][i] <= 1
    graph[i][i] = 1
    1 <= initial.length < graph.length
    0 <= initial[i] < graph.length

*/

public class _0924_Minimize_Malware_Spread {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // 1. union all connected components
    // 2. if more than two elements of the initial belong to the same component, remove anyone won't affect the result
    int[] roots;
    int[] size;

    public int minMalwareSpread_UF(int[][] graph, int[] initial) {
        int n = graph.length;
        size = new int[n];
        roots = new int[n];
        for (int i = 0; i < n; ++i) {
            roots[i] = i;
            size[i] = 1;
        }
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if (graph[i][j] == 1) {
                    union(i, j);
                }
            }
        }
        Arrays.parallelSort(initial);
        int[] visited = new int[n];
        for (int mal : initial) {
            visited[find(mal)]++;
        }
        int max = 0;
        int res = Integer.MAX_VALUE;
        for (int mal : initial) {
            int r = find(mal);
            if (visited[r] < 2 && size[r] > max) {
                max = size[r];
                res = mal;
            }
        }
        return res == Integer.MAX_VALUE ? initial[0] : res;
    }

    private int find(int idx) {
        if (roots[idx] == idx) {
            return idx;
        }
        return roots[idx] = find(roots[idx]);
    }

    private void union(int idx1, int idx2) {
        int r1 = find(idx1);
        int r2 = find(idx2);
        if (r1 != r2) {
            if (size[r1] < size[r2]) {
                roots[r1] = r2;
                size[r2] += size[r1];
            } else {
                roots[r2] = r1;
                size[r1] += size[r2];
            }
        }
    }

}
